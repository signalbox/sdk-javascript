{"name":"Signal Box JavaScript SDK","body":"# Signal Box JavaScript SDK\r\n\r\nThe Signal Box JavaScript SDK aims to provide a light wrapper to communicate with your Signal Box apps. The library depends on jQuery, however suggestions for compatability with other libraries are welcome.\r\n\r\n\r\n## Contents\r\n\r\n* [API Documentation](#api-documentation)\r\n* [Setup](#setup)\r\n* [Actions](#actions)\r\n* [HTTP Verbs](#http-verbs)\r\n* [Queries without an explicit scope](#queries-without-an-explicit-scope)\r\n* [Query Encoding](#query-encoding)\r\n* [Function Chaining](#function-chaining)\r\n* [Cross Origin Requests](#cross-origin-requests)\r\n\r\n\r\n## API Documentation\r\n\r\nThe API documentation related to each library call can be found on [the Signal Box documentation site](https://docs.getsignalbox.com/reference/resource-api).\r\n\r\n\r\n## Setup\r\n\r\nInclude the SDK in your page:\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"http://cdn.getsignalbox.com/sdks/javascript/sdk-0.1.0.js\"></script>\r\n```\r\n\r\nIn order to start communicating with your resources API, you'll need to tell Signal Box who you are and what application you're using. To do this, call the `setup` function.\r\n\r\n```javascript\r\nSignalBox.setup({\r\n  app      : 'myapp',\r\n  username : 'demo',\r\n  version  : 1, // optional, latest (1) by default.\r\n  https    : true // optional, HTTP by default.\r\n});\r\n```\r\n\r\nThis will ensure your credentials are set correctly for each request.\r\n\r\n\r\n## Actions\r\n\r\nSignal Box describes HTTP verbs using actions. There are 5 actions in total:\r\n\r\n* [List](#list)\r\n* [Read](#read)\r\n* [Create](#create)\r\n* [Update](#update)\r\n* [Destroy](#destroy)\r\n\r\nEach of these actions are exposed through the library API.\r\n\r\n\r\n### List\r\n\r\n```javascript\r\nSignalBox.list(resource, options)\r\n```\r\n\r\n* **resource** - The resource plural name.\r\n* **options** - An object containing any keys supported by jQuery.ajax (including `success` and `error`), as well as:\r\n  * **query** - A valid SBQL query, with replacement tags. See [query encoding](#query-encoding).\r\n  * **queryReplacements** - A valid replacement object for the `query` parameter.\r\n\r\nMakes a request to a resources list action, returning a collection of records. The `success` and `error` callbacks are called with the arguments `response` and `xhr`.\r\n\r\n\r\n### Read\r\n\r\n```javascript\r\nSignalBox.read(resource, id, options)\r\n```\r\n\r\n* **resource** - The resource plural name.\r\n* **id** - The ID of the resource instance.\r\n* **options** - An object containing any keys supported by jQuery.ajax (including `success` and `error`).\r\n\r\nMakes a request to a resources read action, returning an instance of a resource. The `success` and `error` callbacks are called with the arguments `response` and `xhr`.\r\n\r\n\r\n### Create\r\n\r\n```javascript\r\nSignalBox.create(resource, options)\r\n```\r\n\r\n* **resource** - The resource plural name.\r\n* **options** - An object containing any keys supported by jQuery.ajax (including `success` and `error`), as well as:\r\n  * **params** - An object representing the property values of the new resource.\r\n\r\nMakes a request to a resources create action, creating and returning a new resource instance. The `success` and `error` callbacks are called with the arguments `response` and `xhr`.\r\n\r\n\r\n### Update\r\n\r\n```javascript\r\nSignalBox.update(resource, id, options)\r\n```\r\n\r\n* **resource** - The resource plural name.\r\n* **id** - The ID of the resource instance.\r\n* **options** - An object containing any keys supported by jQuery.ajax (including `success` and `error`), as well as:\r\n  * **params** - An object representing the property values to update on the resource.\r\n\r\nMakes a request to a resources update action, updating and returning the resource instance. The `success` and `error` callbacks are called with the arguments `response` and `xhr`.\r\n\r\n\r\n### Destroy\r\n\r\n```javascript\r\nSignalBox.destroy(resource, id, options)\r\n```\r\n\r\n* **resource** - The resource plural name.\r\n* **id** - The ID of the resource instance.\r\n* **options** - An object containing any keys supported by jQuery.ajax (including `success` and `error`).\r\n\r\nMakes a request to a resources destroy action, deleting the resource instance. The `success` and `error` callbacks are called with the arguments `response` and `xhr`.\r\n\r\n\r\n## HTTP Verbs\r\n\r\nAction functions are simply wrappers around the HTTP verbs API. If you wish, you can use these instead to communicate with your resources:\r\n\r\n* [GET](#get)\r\n* [POST](#post)\r\n* [PUT](#put)\r\n* [DELETE](#delete)\r\n\r\n\r\n### GET\r\n\r\n```javascript\r\nSignalBox.get(url, options)\r\n```\r\n\r\n* **url** - the relative target URL.\r\n* **options** - An object containing any keys supported by jQuery.ajax (including request parameters, `success` and `error`).\r\n\r\nPerforms a GET request to the given URL. The `success` and `error` callbacks are called with the arguments `response` and `xhr`.\r\n\r\n\r\n### POST\r\n\r\n```javascript\r\nSignalBox.post(resource, options)\r\n```\r\n\r\n* **url** - the relative target URL.\r\n* **options** - An object containing any keys supported by jQuery.ajax (including request parameters, `success` and `error`).\r\n\r\nPerforms a POST request to the given URL. The `success` and `error` callbacks are called with the arguments `response` and `xhr`.\r\n\r\n\r\n### PUT\r\n\r\n```javascript\r\nSignalBox.put(resource, options)\r\n```\r\n\r\n* **url** - the relative target URL.\r\n* **options** - An object containing any keys supported by jQuery.ajax (including request parameters, `success` and `error`).\r\n\r\nPerforms a PUT request to the given URL. The `success` and `error` callbacks are called with the arguments `response` and `xhr`.\r\n\r\n\r\n### DELETE\r\n\r\n```javascript\r\nSignalBox.delete(resource, options)\r\n```\r\n\r\n* **url** - the relative target URL.\r\n* **options** - An object containing any keys supported by jQuery.ajax (including request parameters, `success` and `error`).\r\n\r\nPerforms a DELETE request to the given URL. Note that some older browsers may require you to access this method using the `SignalBox['delete']` syntax due to `delete` being a reserved word. The `success` and `error` callbacks are called with the arguments `response` and `xhr`.\r\n\r\n## Queries without an explicit scope\r\n\r\nSBQL queries can also be executed without an explicit scope (resource plural name). You can do this using the `query` function.\r\n\r\n```javascript\r\nSignalBox.query(query, replacements, options)\r\n```\r\n\r\n* **query** - The SBQL query, with supported replacement tags.\r\n* **replacements** - A valid replacement object for the `query` parameter.\r\n* **options** - An object containing any keys supported by jQuery.ajax (including `success` and `error`).\r\n\r\nExample usage:\r\n\r\n```javascript\r\nSignalBox.query('SELECT * FROM {{resource}} ORDER BY {{order}}', {\r\n  resource : 'users',\r\n  order    : 'username'\r\n}, {\r\n  success : function(response){\r\n    console.log(response)\r\n  }\r\n})\r\n```\r\n\r\n\r\n## Query Encoding\r\n\r\n```javascript\r\nSignalBox.encodeSBQL(query, replacements)\r\n```\r\n\r\n* **query** - A string representation of the SBQL query.\r\n* **replacements** - An object containing query replacements.\r\n\r\nEncodes a string as a URL parameter into a valid SBQL query. This is a convenience method to avoid scenarios where you may have a large query requiring you to concatenate many strings.\r\n\r\nExample usage:\r\n\r\n```javascript\r\nSignalBox.encodeSBQL('SELECT * FROM {{resource}} ORDER BY {{order}}', {\r\n  resource : 'users',\r\n  order    : 'username'\r\n}) // => SELECT%20*%20FROM%20users%20ORDER%20BY%20username\r\n```\r\n\r\n## Function Chaining\r\n\r\nJust like jQuery's `$.ajax` function, each Signal Box action and HTTP verb call returns a deferred object, ensuring method chaining works the same as a regular jQuery AJAX call.\r\n\r\n\r\n## Cross Origin Requests\r\n\r\nIn order to use the SDK from a remote server you'll need to use the Request Headers add-on. This allows you to set additional headers in API responses, including [CORS](https://developer.mozilla.org/en/HTTP_access_control) headers. For example, you may want to set the following headers:\r\n\r\n```plain\r\nAccess-Control-Allow-Origin: *\r\nAccess-Control-Allow-Headers: Content-Type, X-Requested-With\r\nAccess-Control-Allow-Methods: GET, POST, PUT, DELETE\r\n```\r\n\r\nAn alternative to allowing cross domain communication is to use a proxy. When proxying requests you can tell the SDK to use your local webserver instead of `api.getsignalbox.com` by changing the `SignalBox.host` value to your web server address.\r\n\r\n\r\n## Specs\r\n\r\nSpecs are written using Jasmine and Sinon. Running the tests should be as simple as opening `specs/index.html` in your browser.\r\n\r\n\r\n## Bugs\r\n\r\nIf you have any problems with the library, please file an [issue](https://github.com/signalbox/sdk-javascript/issues).\r\n\r\n\r\n## Note on Patches & Pull Requests\r\n\r\n* Fork the project.\r\n* Make your feature addition or bug fix.\r\n* Add tests for it. This is important so we don't break it in a future version unintentionally.\r\n* Commit, please do not mess with rakefile, version, or history.\r\n* Send us a pull request.\r\n\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2012 Signal Box <josh@getsignalbox.com>. See LICENSE for details.\r\n","tagline":"The official Signal Box JavaScript SDK.","google":"UA-25344605-5","note":"Don't delete this file! It's used internally to help with page regeneration."}